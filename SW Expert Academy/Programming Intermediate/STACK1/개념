1. Stack 자료구조의 개념
1) 기본 개념
 - 자료를 쌓아올린 형태
 - 선형구조(자료 간의 관계가 1대1)
 - 자료를 삽입(push)하거나 삭제(pop)할 수 있음
 - 후입선출
 - 스택의 마지막에 삽입된 자료를 top이라고 함
2) 데이터 삽입/삭제 과정
 -삽입
 def push(item):
     s.append(item)
 -삭제
 def pop():
    if len(s)==0:
      #underflow
      return
    else:
      return s.pop(-1)

2. Stack의 응용 : 마지막 데이터를 pop하여 비교, Stack에 요소가 더 이상 없으면 검사, 호출이 종료됨
1) 괄호 검사
2) 함수 호출 ex)재귀함수

3. Memoization
 - 프로그램을 실행할 때 이전에 계산한 결과를 메모리에 저장하여 반복적인 계산을 줄여줌
 - DP의 핵심
 ex)피보나치 수열에서 fibo(n)의 값을 계산하자마자 저장하는 방법, 저장되어있다면 다시 계산하지 않겠다.
 
4. DP (동적 계획법)
 - 입력 크기가 작은 부분들을 계산한 후에 그 해를 이용하여 큰 문제들을 해결함
 1) 피보나치 수열 문제 DP로 풀기
  (1) 작은 문제로 분해
  (2) 작은 문제들의 해를 구한다
  (3) 해를 테이블에 저장하고 그 해들을 이용하여 상위 문제 해결
    def fibo2(n):
       f=[0,1]
       for i in range(2,n+1):
          f.append(f[i-1]+f[i-2])
       return f[n]
   - 재귀함수를 이용하는 것 보다 반복을 이용한 fibo2가 더 효율적이다.
   
5. DFS (깊이 우선 탐색)
 1) 과정
 (1) 시작 정점의 한 방향으로부터 갈 수 있는곳까지 깊이 탐색
 (2) 더 갈 곳이 없으면 가장 마지막에 만났던 갈림길까지 되돌아옴
 (3) 다른 방향으로 깊이 탐색, 이 과정을 반복하여 모든 정점 탐색
 - 방문한 정점들을 tack에 push하고 pop(더이상 갈 곳이 없을때)하는 것을 통해 마지막 갈림길까지 되돌아오는 과정을 반복한다. Stack에 요소가 하나도 없게 되면 모든 정점을 순회한 것이다.
 - 정점의 방문 여부는 리스트를 이용하여 표시(?)한다.
